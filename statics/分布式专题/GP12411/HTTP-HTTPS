1 http 和https 的区别
http协议 是无状态的  http 本身不会对保存请求和响应的通信状态
http 缺点 1 不验证请求和响应身份 2 传输数据使用明文可能别窃取 3 不验证数据是否被篡改
https 1 传输的是加密数据  2 验证传输双方身份 3 验证数据是否被篡改


2 简单说说https是如何保证安全传输的
客户端
1 带上用户 客户端随机生成数 sessionid  （TCP 三次握手） 请求服务器
服务器生成 公私钥 服务器带上公司钥请求ca机构
ca 机构加密公钥生成 摘要算法 摘要内容 将信息返给服务器
服务器返回给客户端 （服务器随机生产数 服务器的证书 加密的算法 ）
客户端 验证服务器返回的数据 如 ca证书 有效期 所有者 验签数 ok
客户端将数据 pre-master +secrct +serverrodom +clirodom+证书机密
请求服务器 服务器加密 验证ok
返回一个数据 客户端取出 sessionkey 会话结束
3  https是不是绝对安全的？有没有办法被破解？
是绝对安全的
没有
因为 https 有四个特征 机密性 完整性 真实性  不可否认性
机密性 指传输的数据都是通过Sessionkey （会话秘钥）加密的 网络是看不到明文的
完整性 避免网络传输数据被篡改 通过MAC算法来保证数据的完整性
真实性 指通信双方是可信的 通过公钥 来保证真实性
不可否认性 这个消息是你发给我的 无法伪装  因为使用了签名的技术来保证

4
http无状态协议，怎么理解无状态协议。如何实现有状态的请求
http 不会记录请求方和反应方的状态理解成无状态协议
http 引用了cookie 来实现了有状态请求 cookie 会在请求和响应时响应报文的首部字段
setcookie 然后把信息保存到cookie
每次请求自动把cookie 放到请求报文里

5 说说http协议中的302状态码的作用
302状态码的是用来做暂时重定向的 可能会被网址劫持
建议使用301

6 304缓存原理
客户端A请求服务器 服务器返回页面带一个ETag 展现页面 将ETag 和页面返回
客户端带上ETag 将页面和ETag信息保存 再次请求服务器 服务器检查ETag是否有变化 没变化返回 304 和空的响应提
有变化则返回200 返回ETag 和页面

7 http协议1.0和http协议1.1的区别
http1.0 和 1.1 都是使用长连接 超文本传输协议
1.0
GET POST HEAD 请求方法
请求服务器后返回数据之后立即关闭连接
请求流程 发起请求 服务器返回数据 关闭连接 浏览器解析数据  当解析的资源不在缓存中 进行连接 获取  这样浪费资源
当 tcp 三次握手前两次 都会带有 SYN 和 MESS 协议好的数据报文大小  超过会导致请求连接缓慢
由服务器发起TCP 的释放连接 那么服务器会产生一个 TIME_WAIT 在一个繁忙的服务器很多控制块会处于繁忙

1.1
方法 DELET OPTION PUT TRACE CONNECT
1.1 在1.0 的基础上改进了 继续沿用长连接
1.1请求头加入了connection 如果connection=keepAlive 请求服务器 服务器会认为继续保持长连接
如果connection=close 服务器会释放TCP连接
支持流水线
在1.1中支持流水线这样的请求模式
非流水线 是指 当前请求会影响下次请求 当前请求请求到服务器时 服务器如果没有返回响应结果 下次请求不会执行 导致资源浪费
流水线式指 当前请求和下次请求相互之间不会产生影响 但是服务器会按照请求的顺序返回响应
1.1 中加入了 100-continue
客户端会带上Expect: 100-continue 字段 和只有http head 报文发送请求 如果接受 返回100 否则 返回401
如果返回100 表示接受该请求 客户端会带上 head body 部分请求服务器
解决了请求带有数据过大问题
1.1 中加入了HOST
请求和反应都会包含一个HOST host支持一个服务器多个站点 如果不带host 会返回400 （Bad Request）


8 如何保证基于http协议的接口的安全性
1 重要的数据加密 比如 用户名密码
2 sign 签名 验证请求是否和服务器的签名一致
3 记录请求和响应通信 状态

9 http协议上传文件，数据如何传输？
解析DNS TCP 三次握手连接 发送数据
发送结束 返回给客户端 四次挥手 释放连接

11  说说http协议的优缺点
TCP 三次握手 四次挥手 保证数据的正常传输
通过明文传输数据 可能被窃取
不记录通信状态
不能保证数据的完整性可能被窃取

12 一次http请求的完整交互流程
1建立TCP 连接
2web浏览器向web服务器发送请求命令
3web浏览器向web服务器发送请求头信息
4web服务器响应
5web服务器发送响应头信息
6web服务器返回数据 浏览器渲染页面
7web服务器释放TCP连接






